/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.BanDAO;
import Controller.ChiTietHoaDonDAO;
import Controller.HoaDonDAO;
import Controller.LuuDAO;
import Controller.MenuDAO;
import Model.Ban;
import Model.ChiTietHoaDon;
import Model.HoaDon;
import Model.Luu;
import Model.Menu;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.PrintWriter;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author tanda
 */
public class QLBanHang extends javax.swing.JPanel implements ActionListener {

    String maNhanVien;
    ArrayList<JButton> listButton = new ArrayList<>();
    ArrayList<Ban> listBan = new ArrayList<>();
    ArrayList<Menu> listMenu = new ArrayList<>();
    DefaultTableModel modelMenu;
    ArrayList<Luu> listHoaDon = new ArrayList<>();
    DefaultTableModel modelHoaDon;
    ArrayList<Luu> listGopBan = new ArrayList<>();
    ArrayList<String> listBanGop = new ArrayList<>();
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
    DateTimeFormatter formatter2 = DateTimeFormatter.ofPattern("yyyyMMdd HHmmss");
    boolean gB = false;

    /**
     * Creates new form QLBanHang
     */
    public QLBanHang(String maNhanVien) {
        initComponents();
        this.maNhanVien = maNhanVien;
        loadBan();
        createTable();
    }

    void loadBan() {
        BanDAO.selectAll(listBan);
        int x = 10;
        int y = 10;
        for (Ban ban : listBan) {
            JButton button = new JButton();
            button.setBounds(x, y, 80, 25);
            pan_ban.add(button);
            pan_ban.revalidate();
            pan_ban.repaint();
            button.addActionListener(this);
            button.setText(ban.getTenBan());
            if (ban.getTinhTrang().equals("1")) {
                button.setBackground(Color.WHITE);
            } else {
                button.setBackground(Color.GREEN);
            }
            listButton.add(button);
            x += 80;
            if (x > 240) {
                x = 10;
                y += 25;
            }
        }
    }

    void createTable() {
        String[] heard = {"Tên món", "Giá"};
        modelMenu = new DefaultTableModel(null, heard) {
            @Override
            public boolean isCellEditable(int i, int i1) {
                return false;
            }
        };
        tab_menu.setModel(modelMenu);
        String[] heard2 = {"Tên món", "Số lượng", "Tổng tiền"};
        modelHoaDon = new DefaultTableModel(null, heard2) {
            @Override
            public boolean isCellEditable(int i, int i1) {
                return false;
            }
        };
        tab_hoaDon.setModel(modelHoaDon);
    }

    void addRowTableMenu(ArrayList<Menu> list) {
        while (modelMenu.getRowCount() != 0) {
            modelMenu.removeRow(0);
        }
        for (Menu menu : list) {
            Vector v = new Vector();
            v.add(menu.getTenMon());
            v.add(menu.getGia());
            modelMenu.addRow(v);
        }
    }

    void addRowTableHoaDon(ArrayList<Luu> list) {
        while (modelHoaDon.getRowCount() != 0) {
            modelHoaDon.removeRow(0);
        }
        for (Luu luu : list) {
            Vector v = new Vector();
            v.add(MenuDAO.selectTen(luu.getMAMN()));
            v.add(luu.getSoLuong());
            double gia = MenuDAO.selectGia(luu.getMAMN());
            v.add(luu.getSoLuong() * gia);
            modelHoaDon.addRow(v);
        }
    }

    String add3Zero(int n) {
        if (n < 10) {
            return "00" + n;
        }
        if (n < 100) {
            return "0" + n;
        }
        return n + "";
    }

    String getMABlab() {
        return "B" + add3Zero(Integer.valueOf(lab_ban.getText()));
    }

    String chuyenMAB(String i) {
        return "B" + add3Zero(Integer.valueOf(lab_ban.getText()));
    }

    void mess(String s) {
        JOptionPane.showMessageDialog(this, s);
    }

    double tongHoaDon() {
        double d = 0;
        for (int i = 0; i < listHoaDon.size(); i++) {
            d += Double.valueOf(modelHoaDon.getValueAt(i, 2).toString());
        }
        return d;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        pan_ban = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        but_monChinh = new javax.swing.JButton();
        but_monThem = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tab_menu = new javax.swing.JTable();
        but_doUong = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tab_hoaDon = new javax.swing.JTable();
        but_gopBan = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        but_xuatHoaDon = new javax.swing.JButton();
        txt_thanhTien = new javax.swing.JTextField();
        but_thanhToan = new javax.swing.JButton();
        but_xoa = new javax.swing.JButton();
        but_giam = new javax.swing.JButton();
        but_them = new javax.swing.JButton();
        lab_ban = new javax.swing.JLabel();
        lab_banGop = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        pan_ban.setBackground(new java.awt.Color(204, 255, 204));

        javax.swing.GroupLayout pan_banLayout = new javax.swing.GroupLayout(pan_ban);
        pan_ban.setLayout(pan_banLayout);
        pan_banLayout.setHorizontalGroup(
            pan_banLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 288, Short.MAX_VALUE)
        );
        pan_banLayout.setVerticalGroup(
            pan_banLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 508, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 255, 0));
        jLabel1.setText("BÀN");

        jPanel3.setBackground(new java.awt.Color(204, 255, 255));

        but_monChinh.setBackground(new java.awt.Color(0, 255, 255));
        but_monChinh.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        but_monChinh.setText("Món chính");
        but_monChinh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_monChinhActionPerformed(evt);
            }
        });

        but_monThem.setBackground(new java.awt.Color(0, 255, 255));
        but_monThem.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        but_monThem.setText("Món thêm");
        but_monThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_monThemActionPerformed(evt);
            }
        });

        tab_menu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tab_menu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tab_menuMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tab_menu);

        but_doUong.setBackground(new java.awt.Color(0, 255, 255));
        but_doUong.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        but_doUong.setText("Đồ uống");
        but_doUong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_doUongActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(but_monChinh)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(but_monThem)
                .addGap(47, 47, 47)
                .addComponent(but_doUong, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(but_monChinh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(but_monThem, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(but_doUong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 255, 255));
        jLabel4.setText("THỰC ĐƠN");

        jPanel4.setBackground(new java.awt.Color(255, 255, 204));

        tab_hoaDon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tab_hoaDon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tab_hoaDonMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tab_hoaDon);

        but_gopBan.setBackground(new java.awt.Color(255, 255, 0));
        but_gopBan.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        but_gopBan.setText("GỘP BÀN");
        but_gopBan.setToolTipText("");
        but_gopBan.setEnabled(false);
        but_gopBan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_gopBanActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(255, 255, 0));
        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("BÀN: ");

        jLabel6.setBackground(new java.awt.Color(255, 255, 0));
        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("THÀNH TIỀN: ");
        jLabel6.setToolTipText("");

        but_xuatHoaDon.setBackground(new java.awt.Color(255, 255, 0));
        but_xuatHoaDon.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        but_xuatHoaDon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/Icon/List.png"))); // NOI18N
        but_xuatHoaDon.setText("Xem hóa đơn");
        but_xuatHoaDon.setToolTipText("");
        but_xuatHoaDon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_xuatHoaDonActionPerformed(evt);
            }
        });

        txt_thanhTien.setEditable(false);

        but_thanhToan.setBackground(new java.awt.Color(255, 255, 0));
        but_thanhToan.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        but_thanhToan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/Icon/Dollar.png"))); // NOI18N
        but_thanhToan.setText("Thanh Toán");
        but_thanhToan.setToolTipText("");
        but_thanhToan.setActionCommand("");
        but_thanhToan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_thanhToanActionPerformed(evt);
            }
        });

        but_xoa.setText("Xóa");
        but_xoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_xoaActionPerformed(evt);
            }
        });

        but_giam.setText("Giảm");
        but_giam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_giamActionPerformed(evt);
            }
        });

        but_them.setText("Thêm");
        but_them.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_themActionPerformed(evt);
            }
        });

        lab_ban.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lab_ban.setText("---");

        lab_banGop.setText(" ");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txt_thanhTien, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(but_thanhToan, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(but_xuatHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lab_ban, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lab_banGop, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(49, 49, 49)
                                .addComponent(but_gopBan, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addComponent(but_them, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(but_giam, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(but_xoa, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(but_gopBan, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(lab_ban)
                    .addComponent(lab_banGop, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(but_xoa)
                    .addComponent(but_giam)
                    .addComponent(but_them))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txt_thanhTien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(but_xuatHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(but_thanhToan, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 0));
        jLabel5.setText("HÓA ĐƠN");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(pan_ban, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addComponent(jLabel1)
                .addGap(240, 240, 240)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(89, 89, 89))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pan_ban, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void but_monChinhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_monChinhActionPerformed
        listMenu.clear();
        MenuDAO.selectLoai(listMenu, "Món chính");
        addRowTableMenu(listMenu);
    }//GEN-LAST:event_but_monChinhActionPerformed

    private void but_monThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_monThemActionPerformed
        listMenu.clear();
        MenuDAO.selectLoai(listMenu, "Món thêm");
        addRowTableMenu(listMenu);
    }//GEN-LAST:event_but_monThemActionPerformed

    private void but_doUongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_doUongActionPerformed
        listMenu.clear();
        MenuDAO.selectLoai(listMenu, "Đồ uống");
        addRowTableMenu(listMenu);
    }//GEN-LAST:event_but_doUongActionPerformed

    private void but_themActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_themActionPerformed
        int rowMN_menu = tab_menu.getSelectedRow();
        int rowMN_HD = tab_hoaDon.getSelectedRow();
        if (rowMN_HD != -1 && rowMN_menu != -1) {
            mess("Không thể chọn 2 bảng!!!");
            return;
        }

            

        if (rowMN_menu == -1 && rowMN_HD != -1) {
            // them hoa don
            int sl = listHoaDon.get(rowMN_HD).getSoLuong();
            listHoaDon.get(rowMN_HD).setSoLuong(sl + 1);
            LuuDAO.update(listHoaDon.get(rowMN_HD));
            modelHoaDon.setValueAt(sl + 1, rowMN_HD, 1);
            double gia = sl * MenuDAO.selectGia(listHoaDon.get(rowMN_HD).getMAMN());
            modelHoaDon.setValueAt(gia, rowMN_HD, 2);
            txt_thanhTien.setText(tongHoaDon() + "");
            but_gopBan.setEnabled(tab_hoaDon.getRowCount() != 0);
            return;
        }

        if (rowMN_menu != -1 && rowMN_HD == -1) {
            //them menu
            String maMN = listMenu.get(rowMN_menu).getMAMN();
            int sl = 1;
            int in = 0;
            for (int i = 0; i < listHoaDon.size(); i++) {
                String maMN_l = listHoaDon.get(i).getMAMN();
                if (maMN.equals(maMN_l)) {
                    sl += listHoaDon.get(i).getSoLuong();
                    in = i;
                    break;
                }
            }
            Luu luu = new Luu(getMABlab(), maMN, sl);
            if (sl == 1) {
                LuuDAO.insert(luu);
                listHoaDon.clear();
                LuuDAO.selectBan(listHoaDon, getMABlab());
                addRowTableHoaDon(listHoaDon);
                if (listHoaDon.size() == 1) {
                    BanDAO.updateTinhTrangHet(getMABlab());
                    listBan.clear();
                    BanDAO.selectAll(listBan);
                }
            } else {
                LuuDAO.update(luu);
                listHoaDon.get(in).setSoLuong(sl);
                modelHoaDon.setValueAt(sl, in, 1);
                double gia = sl * MenuDAO.selectGia(maMN);
                modelHoaDon.setValueAt(gia, in, 2);
            }
            txt_thanhTien.setText(tongHoaDon() + "");
            but_gopBan.setEnabled(tab_hoaDon.getRowCount() != 0);
            return;
        }
        if (lab_ban.getText().equals("---")) {
            mess("Chưa chọn bàn");
            return;
        }
        mess("Chưa chọn món");

    }//GEN-LAST:event_but_themActionPerformed

    private void tab_hoaDonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tab_hoaDonMouseClicked
        tab_menu.clearSelection();
    }//GEN-LAST:event_tab_hoaDonMouseClicked

    private void tab_menuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tab_menuMouseClicked
        tab_hoaDon.clearSelection();
    }//GEN-LAST:event_tab_menuMouseClicked

    private void but_gopBanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_gopBanActionPerformed
        if (gB) {
            //tat
            gB = false;
            offGopBan(!gB);
            but_gopBan.setBackground(Color.yellow);
            lab_banGop.setText("");
            lab_ban.setText("---");
            listHoaDon.clear();
            addRowTableHoaDon(listHoaDon);
            listGopBan.clear();
            but_gopBan.setEnabled(gB);
            khoiPhucMauBan();
            for (JButton jButton : listButton) {
                jButton.setEnabled(true);
            }
            
        } else {
            //bat
            gB = true;
            offGopBan(!gB);
            but_gopBan.setBackground(Color.green);
            lab_banGop.setText("");
            for (int i = 0; i < listBan.size(); i++) {
                if (listBan.get(i).getTinhTrang().equals("1")) {
                    listButton.get(i).setEnabled(false);
                }
                if (listBan.get(i).getMAB().equals(getMABlab())) {
                    listButton.get(i).setEnabled(false);
                }
            }
            listBanGop.clear();
            listBanGop.add(getMABlab());
        }
        txt_thanhTien.setText(tongHoaDon() + "");
    }//GEN-LAST:event_but_gopBanActionPerformed

    void offGopBan(boolean b) {
        but_doUong.setEnabled(b);
        but_giam.setEnabled(b);
        but_monChinh.setEnabled(b);
        but_monThem.setEnabled(b);
        but_them.setEnabled(b);
        but_xoa.setEnabled(b);
    }

    private void but_xoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_xoaActionPerformed
        int rowMN_menu = tab_menu.getSelectedRow();
        int rowMN_HD = tab_hoaDon.getSelectedRow();
        if (rowMN_HD != -1 && rowMN_menu != -1) {
            mess("Không thể chọn 2 bảng!!!");
            return;
        }
        if (rowMN_HD == -1) {
            mess("Chưa chọn món");
            return;
        }
        if (lab_ban.getText().equals("---")) {
            mess("Chưa chọn bàn");
            return;
        }

        LuuDAO.delete(listHoaDon.get(rowMN_HD));
        listHoaDon.remove(rowMN_HD);
        modelHoaDon.removeRow(rowMN_HD);

        if (listHoaDon.size() == 0) {
            BanDAO.updateTinhTrangCon(getMABlab());
            listBan.clear();
            BanDAO.selectAll(listBan);
        }
        but_gopBan.setEnabled(tab_hoaDon.getRowCount() != 0);
        txt_thanhTien.setText(tongHoaDon() + "");
    }//GEN-LAST:event_but_xoaActionPerformed

    private void but_giamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_giamActionPerformed
        int rowMN_menu = tab_menu.getSelectedRow();
        int rowMN_HD = tab_hoaDon.getSelectedRow();
        if (rowMN_HD != -1 && rowMN_menu != -1) {
            mess("Không thể chọn 2 bảng!!!");
            return;
        }
        if (rowMN_HD == -1) {
            mess("Chưa chọn món");
            return;
        }
        if (lab_ban.getText().equals("---")) {
            mess("Chưa chọn bàn");
            return;
        }

        int sl = listHoaDon.get(rowMN_HD).getSoLuong();
        sl--;
        if (sl == 0) {
            modelHoaDon.removeRow(rowMN_HD);
            LuuDAO.delete(listHoaDon.get(rowMN_HD));
            listHoaDon.remove(rowMN_HD);
            if (listHoaDon.size() == 0) {
                BanDAO.updateTinhTrangCon(getMABlab());
                listBan.clear();
                BanDAO.selectAll(listBan);
            }
        } else {
            LuuDAO.update(listHoaDon.get(rowMN_HD));
            listHoaDon.get(rowMN_HD).setSoLuong(sl);
            modelHoaDon.setValueAt(sl, rowMN_HD, 1);
            double gia = sl * MenuDAO.selectGia(listHoaDon.get(rowMN_HD).getMAMN());
            modelHoaDon.setValueAt(gia, rowMN_HD, 2);
        }
        but_gopBan.setEnabled(tab_hoaDon.getRowCount() != 0);
        txt_thanhTien.setText(tongHoaDon() + "");
    }//GEN-LAST:event_but_giamActionPerformed

    int maCTHDtoN(String s) {
        String a = s.substring(4);
        int i = Integer.valueOf(a);
        return i;
    }

    String maCTHDsau(int a) {
        int i = a + 1;
        if (i < 10) {
            return "CTHD00000" + i;
        }
        if (i < 100) {
            return "CTHD0000" + i;
        }
        if (i < 1000) {
            return "CTHD000" + i;
        }
        if (i < 10000) {
            return "CTHD00" + i;
        }
        if (i < 100000) {
            return "CTHD0" + i;
        }
        return "CTHD" + i;
    }

    int maHDtoN(String s) {
        String a = s.substring(2);
        int i = Integer.valueOf(a);
        return i;
    }

    String maHDsau(int a) {
        int i = a + 1;
        if (i < 10) {
            return "HD00" + i;
        }
        if (i < 100) {
            return "HD0" + i;
        }
        return "HD" + i;
    }

    private void but_thanhToanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_thanhToanActionPerformed
        int canhBao = JOptionPane.showConfirmDialog(this, "Bạn có muốn thanh toán không ?", "Thanh toán", JOptionPane.OK_CANCEL_OPTION);
        if (canhBao != 0) {
            return;
        }
        if (listHoaDon.size() == 0) {
            mess("Không thể thanh toán!!!");
            return;
        }
        
        XuatHoaDon();
        
        String maNew = ChiTietHoaDonDAO.selectCTHDnew();
        String maCTHD = maNew;
        String maHD = HoaDonDAO.selectMaMoiNhat();
        maHD = maHDsau(maHDtoN(maHD));

        LocalDateTime dateTime = LocalDateTime.now();
        String ngayLap = dateTime.format(formatter);

        double thanhTien = Double.valueOf(txt_thanhTien.getText());

        String maB = getMABlab();

        String maNV = maNhanVien;

        HoaDon hd = new HoaDon(maHD, ngayLap, thanhTien, maB, maNV);

        HoaDonDAO.insert(hd);

        for (int i = 0; i < listHoaDon.size(); i++) {
            maCTHD = maCTHDsau(maCTHDtoN(maCTHD));
            //      maHD
            String maMN = listHoaDon.get(i).getMAMN();
            int sl = listHoaDon.get(i).getSoLuong();
            double tongTien = Double.valueOf(tab_hoaDon.getValueAt(i, 2).toString());

            ChiTietHoaDon cthd = new ChiTietHoaDon(maCTHD, maHD, maMN, sl, tongTien);
            ChiTietHoaDonDAO.insert(cthd);
        }

        if (gB) {
            for (String string : listBanGop) {
                BanDAO.updateTinhTrangCon(string);
                LuuDAO.delete(string);
            }
            listBanGop.clear();
            gB = false;
            offGopBan(!gB);
            but_gopBan.setBackground(Color.yellow);
            for (JButton jButton : listButton) {
                jButton.setEnabled(true);
            }
            listGopBan.clear();
        } else {
            BanDAO.updateTinhTrangCon(maB);
            LuuDAO.delete(maB);
        }
        listHoaDon.clear();
        addRowTableHoaDon(listHoaDon);
        listBan.clear();
        BanDAO.selectAll(listBan);
        lab_ban.setText("---");
        lab_banGop.setText("");
        but_gopBan.setEnabled(false);
        txt_thanhTien.setText(tongHoaDon() + "");
        khoiPhucMauBan();
    }//GEN-LAST:event_but_thanhToanActionPerformed

    String add5space(String s) {
        int len = s.length();
        String a = s;
        for (int i = 0; i < 5 - len; i++) {
            a += " ";
        }
        return a;
    }

    String add10space(String s) {
        int len = s.length();
        String a = s;
        for (int i = 0; i < 10 - len; i++) {
            a += " ";
        }
        return a;
    }

    String add15space(String s) {
        int len = s.length();
        String a = s;
        for (int i = 0; i < 15 - len; i++) {
            a += " ";
        }
        return a;
    }

    String add20space(String s) {
        int len = s.length();
        String a = s;
        for (int i = 0; i < 20 - len; i++) {
            a += " ";
        }
        return a;
    }

    String add30space(String s) {
        int len = s.length();
        String a = s;
        for (int i = 0; i < 30 - len; i++) {
            a += " ";
        }
        return a;
    }

    String add60space(String s) {
        int len = s.length();
        String a = s;
        for (int i = 0; i < 60 - len; i++) {
            a += " ";
        }
        return a;
    }
    
    String hoaDon(){
        String time1 = LocalDateTime.now().format(formatter);
        String s = "\t\t\t---Hóa đơn bàn " + lab_ban.getText() + "---\n\n";
        s += "\t Ngày xuất: \t" + time1 + "\n";
        s += "STT\tTên món\t\t\tSố lượng\tGiá\t    Tổng giá\n";
        for(int i = 0 ; i < listHoaDon.size();i++){
            int stt = i +1;
            String tenMon = tab_hoaDon.getValueAt(i, 0).toString();
            int sl = listHoaDon.get(i).getSoLuong();
            double gia = MenuDAO.selectGia(listHoaDon.get(i).getMAMN());
            double tong = Double.valueOf(tab_hoaDon.getValueAt(i, 2).toString());
            
             s += add5space(stt+"") + add30space(tenMon) + add10space(sl+"") + add15space(gia+"") + tong + "\n";
        }
        s += "--------------------------------------------------------------------\n";
        s += add60space("Thành tiền:") + txt_thanhTien.getText();
        return s;
    }
    
    void XuatHoaDon(){
        String time2 = LocalDateTime.now().format(formatter2);
        try {
            File fname = new File("HoaDonBanHang\\" + time2 + ".txt");
            if (fname.createNewFile()) {
                mess("Xuất thành công: " + time2 + ".txt\n"
                        + "Full path: " + System.getProperty("user.dir") + "\\HoaDonBanHang\\" + time2 + ".txt");
            } else {
                System.out.println("File already exists.");
            }
            PrintWriter pw = new PrintWriter(fname);
            pw.write(hoaDon());
            pw.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void but_xuatHoaDonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_xuatHoaDonActionPerformed
        int canhBao = JOptionPane.showConfirmDialog(this, "Bạn có muốn xuất hóa đơn không ?", "Xuất bill", JOptionPane.OK_CANCEL_OPTION);
        if (canhBao != 0) {
            return;
        }
        if (listHoaDon.size() == 0) {
            mess("Không thể xuất bill!!!");
            return;
        }
        String s = hoaDon();
        System.out.println(s);
        mess(s);
    }//GEN-LAST:event_but_xuatHoaDonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton but_doUong;
    private javax.swing.JButton but_giam;
    private javax.swing.JButton but_gopBan;
    private javax.swing.JButton but_monChinh;
    private javax.swing.JButton but_monThem;
    private javax.swing.JButton but_thanhToan;
    private javax.swing.JButton but_them;
    private javax.swing.JButton but_xoa;
    private javax.swing.JButton but_xuatHoaDon;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lab_ban;
    private javax.swing.JLabel lab_banGop;
    private javax.swing.JPanel pan_ban;
    private javax.swing.JTable tab_hoaDon;
    private javax.swing.JTable tab_menu;
    private javax.swing.JTextField txt_thanhTien;
    // End of variables declaration//GEN-END:variables
    void khoiPhucMauMenu() {
        but_doUong.setBackground(Color.cyan);
        but_monChinh.setBackground(Color.cyan);
        but_monThem.setBackground(Color.cyan);
    }

    void khoiPhucMauBan() {
        for (int i = 0; i < listButton.size(); i++) {
            if (listBan.get(i).getTinhTrang().equals("1")) {
                listButton.get(i).setBackground(Color.WHITE);
            } else {
                listButton.get(i).setBackground(Color.GREEN);
            }
        }
    }

    void addRowGop() {
        for (int i = 0; i < listGopBan.size(); i++) {
            String mnG = listGopBan.get(i).getMAMN();
            boolean b = true;
            for (Luu luu : listHoaDon) {
                String mnH = luu.getMAMN();
                if (mnH.equals(mnG)) {
                    int slG = listGopBan.get(i).getSoLuong();
                    int slH = luu.getSoLuong();
                    luu.setSoLuong(slG + slH);
                    b = false;
                    break;
                }
            }
            if (b) {
                listHoaDon.add(listGopBan.get(i));
            }
        }
    }

    int getSoBan(String maB) {
        String ma = maB.substring(1);
        int n = Integer.valueOf(ma);
        return n;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        for (int i = 0; i < listButton.size(); i++) {
            if (e.getSource() == listButton.get(i)) {
                if (gB) {
                    listButton.get(i).setBackground(Color.cyan);
                    listGopBan.clear();
                    LuuDAO.selectBan(listGopBan, listBan.get(i).getMAB());
                    addRowGop();
                    addRowTableHoaDon(listHoaDon);
                    int sb = getSoBan(listBan.get(i).getMAB());
                    String getLab = lab_banGop.getText();
                    lab_banGop.setText(getLab + " " + sb);
                    listBanGop.add(listBan.get(i).getMAB());
                    listButton.get(i).setEnabled(false);
                } else {
                    khoiPhucMauBan();
                    listButton.get(i).setBackground(Color.cyan);
                    lab_ban.setText(listButton.get(i).getText().substring(4));
                    listHoaDon.clear();
                    LuuDAO.selectBan(listHoaDon, listBan.get(i).getMAB());
                    addRowTableHoaDon(listHoaDon);
                    if (listBan.get(i).getTinhTrang().equals("0")) {
                        but_gopBan.setEnabled(true);
                    } else {
                        but_gopBan.setEnabled(false);
                    }

                }
                txt_thanhTien.setText(tongHoaDon() + "");
            }
        }
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
